<?xml version="1.0" ?><OrchExportInfo><Time>Sun Aug 13 12:43:38 UTC 2017</Time><User>John McDonough</User><Comments>Workflow posts a message to a Spark Room based on the Title(Name) of the Room.  The Workflow requires a Spark API token, a Spark Room Name, and a message for the Spark Room.  The workflow also supports a proxy if one if needed.</Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data>{"checksum":"eeab818954a42f7dd1c424a9cc9df6e7a066c0c8","data":""}</data></featureAssetEntry><type>WORKFLOWS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"Spark_messages_create","taskLabel":"Create message in Spark room","isActive":true,"taskSummary":"Post a message to a Spark room.\n","taskDescription":"Post a message to a room.\n\nPosts a plain text message, and optionally a media content attachment, to a room.","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 7 inputs\r\n   token (Label: \'token\', Type: text, MappableType: gen_text_input)\r\n   message (Label: \'Message\', Type: text, MappableType: gen_text_input)\r\n   roomId (Label: \'Spark Room Id\', Type: text, MappableType: gen_text_input)\r\n   file (Label: \'file\', Type: text, MappableType: gen_text_input)\r\n   proxyHost (Label: \'proxyHost\', Type: text, MappableType: gen_text_input)\r\n   proxyPort (Label: \'proxyPort\', Type: text, MappableType: gen_text_input)\r\n   rollback (Label: \'rollback\', Type: number, MappableType: )\r\n\r\nTask contains 1 outputs\r\n   messageId (Description: \'messageId\', Type: gen_text_input)\r\nisRepoUsed: falseRepo file: Repo: script: //=================================================================\n// Title:               Spark_messages_post\n// Description:         This will post a message to a specific spark group\n//\n// Author:              Rob Edwards (@clijockey/robedwa@cisco.com)\n// Date:                18/12/2015\n// Version:             1.3 (updated 27/01/2016)\n// Dependencies:\n// Limitations/issues:  Updated for UCSD 5.4 and tested on 5.4.0.1\n//=================================================================\n\nimportPackage(java.util);\nimportPackage(java.lang);\nimportPackage(java.io);\nimportPackage(com.cloupia.lib.util);\nimportPackage(org.apache.commons.httpclient);\nimportPackage(org.apache.commons.httpclient.cookie);\nimportPackage(org.apache.commons.httpclient.methods);\nimportPackage(org.apache.commons.httpclient.auth);\nimportPackage(org.apache.commons.httpclient.protocol);\nimportClass(org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory);\nimportPackage(com.cloupia.lib.cIaaS.vcd.api);\n\n//----------------------------------------------------------------------------------------\n//\n//        Author: Russ Whitear (rwhitear@cisco.com)\n//\n// Function Name: httpRequest()\n//\n//       Version: 3.0\n//\n// Modifications: Added HTTP header Connection:close to execute method to overcome the\n//                CLOSE_WAIT issue caused with releaseConnection().\n//\n//                Modified SSL socket factory code to work with UCS Director 5.4.0.0.\n//\n//   Description: HTTP Request function - httpRequest.\n//\n//                I have made the httpClient functionality more object like in order to\n//                make cloupia scripts more readable when making many/multiple HTTP/HTTPS\n//                requests within a single script.\n//\n//      Usage: 1. var request = new httpRequest();                   // Create new object.\n//\n//             2. request.setup(\"192.168.10.10\",\"https\",\"admin\",\"cisco123\");      // SSL.\n//          or:   request.setup(\"192.168.10.10\",\"http\",\"admin\",\"cisco123\");       // HTTP.\n//          or:   request.setup(\"192.168.10.10\",\"https\");           // SSL, no basicAuth.\n//          or:   request.setup(\"192.168.10.10\",\"http\");            // HTTP, no basicAuth.\n//\n//             3. request.getRequest(\"/\");                    // HTTP GET (URI).\n//          or:   request.postRequest(\"/\",\"some body text\");  // HTTP POST (URI,BodyText).\n//          or:   request.deleteRequest(\"/\");                 // HTTP DELETE (URI).\n//\n//  (optional) 4. request.contentType(\"json\");            // Add Content-Type HTTP header.\n//          or:   request.contentType(\"xml\");\n//\n//  (optional) 5. request.addHeader(\"X-Cloupia-Request-Key\",\"1234567890\");  // Any Header.\n//\n//             6. var statusCode = request.execute();                     // Send request.\n//\n//             7. var response = request.getResponse(\"asString\");   // Response as string.\n//          or:   var response = request.getResponse(\"asStream\");   // Response as stream.\n//\n//             8. request.disconnect();                             // Release connection.\n//\n//\n//          Note: Be sure to add these lines to the top of your script:\n//\n//          importPackage(java.util);\n//          importPackage(com.cloupia.lib.util);\n//          importPackage(org.apache.commons.httpclient);\n//          importPackage(org.apache.commons.httpclient.cookie);\n//          importPackage(org.apache.commons.httpclient.methods);\n//          importPackage(org.apache.commons.httpclient.auth);\n//          importPackage(org.apache.commons.httpclient.protocol);\n//          importClass(org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory);\n//          importPackage(com.cloupia.lib.cIaaS.vcd.api);\n//\n//----------------------------------------------------------------------------------------\n\nvar httpRequest = function () {};\n\nhttpRequest.prototype.setup = function(serverIp, transport, username, password) {\n    this.serverIp = serverIp;\n    this.transport = transport;\n    this.username = username;\n    this.password = password;\n\n    this.httpClient = new HttpClient();\n\n    // Decide whether to create an HTTP or HTTPS connection based up \'transport\'.\n    if( this.transport == \"https\" ) {\n\t\tthis.httpClient = CustomEasySSLSocketFactory.getIgnoreSSLClient(this.serverIp, 443);\n\n        // Set proxy configuration if proxy info has been passed to the task\n        if (proxyHost) {\n            logger.addInfo(\"Proxy configuration has been passed, adding - \"+proxyHost+\":\"+proxyPort);\n            this.httpClient.getHostConfiguration().setProxy(proxyHost, proxyPort);\n        }\n\n\t\tthis.httpClient.getParams().setCookiePolicy(\"default\");\n    } else {\n        // Create new HTTP connection.\n        this.httpClient.getHostConfiguration().setHost(this.serverIp, 80, \"http\");\n    }\n\n    this.httpClient.getParams().setCookiePolicy(\"default\");\n\n    // If username and password supplied, then use basicAuth.\n    if( this.username && this.password ) {\n        this.httpClient.getParams().setAuthenticationPreemptive(true);\n        this.defaultcreds = new UsernamePasswordCredentials(this.username, this.password);\n        this.httpClient.getState().setCredentials(new AuthScope(this.serverIp, -1, null), this.defaultcreds);\n    }\n};\n\nhttpRequest.prototype.contentType = function(contentType) {\n    this.contentType = contentType;\n\n    this.contentTypes = [\n        [\"xml\",\"application/xml\"],\n        [\"json\",\"application/json\"]\n    ];\n\n    for( this.i=0; this.i<this.contentTypes.length; this.i++)\n        if(this.contentTypes[this.i][0] == this.contentType) {\n            this.httpMethod.addRequestHeader(\"Content-Type\", this.contentTypes[this.i][1]);\n            this.httpMethod.addRequestHeader(\"Accept\", this.contentTypes[this.i][1]);\n        }\n};\n\nhttpRequest.prototype.addHeader = function(headerName,headerValue) {\n    this.headerName = headerName;\n    this.headerValue = headerValue;\n\n    this.httpMethod.addRequestHeader(this.headerName, this.headerValue);\n};\n\nhttpRequest.prototype.execute = function() {\n    // Connection:close is hard coded here in order to ensure that the TCP connection\n    // gets torn down immediately after the request. Comment this line out if you wish to\n    // experiment with HTTP persistence.\n    this.httpMethod.addRequestHeader(\"Connection\", \"close\");\n\n    this.httpClient.executeMethod(this.httpMethod);\n\n    // Retrieve status code.\n    this.statusCode = this.httpMethod.getStatusCode();\n\n    return this.statusCode;\n}\n\nhttpRequest.prototype.getRequest = function(uri) {\n    this.uri = uri;\n\n    // Get request.\n    this.httpMethod = new GetMethod(this.uri);\n};\n\nhttpRequest.prototype.postRequest = function(uri,bodytext) {\n    this.uri = uri;\n    this.bodytext = bodytext;\n\n    // POST Request.\n    this.httpMethod = new PostMethod(this.uri);\n    this.httpMethod.setRequestEntity(new StringRequestEntity(this.bodytext));\n};\n\nhttpRequest.prototype.getResponse = function(asType) {\n    this.asType = asType;\n\n    if( this.asType == \"asStream\" )\n        return this.httpMethod.getResponseBodyAsStream();\n    else\n        return this.httpMethod.getResponseBodyAsString();\n};\n\nhttpRequest.prototype.deleteRequest = function(uri) {\n    this.uri = uri;\n\n    // Get request.\n    this.httpMethod = new DeleteMethod(this.uri);\n};\n\nhttpRequest.prototype.disconnect = function() {\n    // Release connection.\n    this.httpMethod.releaseConnection();\n};\n\n\n\nfunction statusCheck(statusCode) {\n  //----------------------------------------------------------------------------\n  // Author:      Rob Edwards (@clijockey/robedwa@cisco.com)\n  // Description: Check the status code after Spark API call\n  //----------------------------------------------------------------------------\n\n  if ((statusCode == 200) || (statusCode == 204)) {\n      logger.addInfo(\"All looks good. HTTP response code: \"+statusCode);\n      return\n  } else if (statusCode == 400) {\n        logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n        logger.addInfo(\"Return code \"+statusCode+\": The request was invalid or cannot be otherwise served. An accompanying error message will explain further.\");\n        logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n        // Set this task as failed.\n        ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 401) {\n      logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": Authentication credentials were missing or incorrect.\");\n      logger.addEror(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 403) {\n      logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": The request is understood, but it has been refused or access is not allowed.\");\n      logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 404) {\n      logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": The URI requested is invalid or the resource requested, such as a user, does not exist. Also returned when the requested format is not supported by the requested method.\");\n      logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 409) {\n      logger.addWarn(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": The request could not be processed because it conflicts with some established rule of the system. For example, a person may not be added to a room more than once.\");\n      logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 500) {\n      logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": Something went wrong on the server.\");\n      logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 501) {\n      logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": Server is overloaded with requests. Try again later.\");\n      logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else {\n      logger.addError(\"An unknown response code has occured therefore exiting: \"+statusCode);\n      ctxt.setFailed(\"Request failed.\");\n  }\n}\n\nfunction clean(response, toClean) {\n  //----------------------------------------------------------------------------\n  // Author:      Rob Edwards (@clijockey/robedwa@cisco.com)\n  // Description: Clean up the response by stripping out the extra \"\"\n  //----------------------------------------------------------------------------\n  this.response = response;\n  this.toClean = toClean;\n\n  logger.addInfo(\"Running through a clean up to ontain the \"+toClean+\" value.\");\n  this.cleaned = new String();\n  this.cleaned = JSON.getJsonElement(this.response, this.toClean).toString().replace(/\"/g, \"\");\n  logger.addInfo(\"Value cleaned up, returning :\"+this.cleaned);\n  return this.cleaned;\n}\n\nfunction getRoomIdFromName(token, roomId) {\n    this.destination = \"api.ciscospark.com\";\n    this.token = token;\n    this.roomId = roomId;\n    \n    var request = new httpRequest();\n    request.setup(this.destination,\"https\");\n    request.getRequest(\'/v1/rooms\');\n    request.contentType(\"json\");\n    request.addHeader(\"Authorization\", \"Bearer \" + this.token);\n\n    var statusCode = request.execute();\n    statusCheck(statusCode);\n\n    this.value = request.getResponse(\"asString\");\n    logger.addInfo(\"Raw returned vaules: \" +value);\n\n    var sparkroomid = \"none\";\n    var sparkroomtitle = \"none\";\n    var data = JSON.getJsonElement(value, null);\n    var jsonData = JSON.getJsonElement(data, \"items\")\n    for (var i = 0; i < jsonData.size(); i++) {\n        \n        if (JSON.getJsonElement(jsonData.get(i), \"title\").toString().replace(/\"/g, \"\") == this.roomId) {\n            logger.addInfo(\"Spark Room:      \" + this.roomId + \" Found!\" );\n            sparkroomtitle = JSON.getJsonElement(jsonData.get(i), \"title\").toString().replace(/\"/g, \"\");\n            sparkroomid = JSON.getJsonElement(jsonData.get(i), \"id\").toString().replace(/\"/g, \"\");\n            logger.addInfo(\"Spark Room Id:   \"+sparkroomid);\n            logger.addInfo(\"Spark Room Name: \"+sparkroomtitle);\n            break;\n        }\n    }\n\n    request.disconnect();\n    logger.addInfo(\"Returning this Spark Room Id:   \"+sparkroomid);\n    return sparkroomid;\n    //return \"Y2lzY29zcGFyazovL3VzL1JPT00vY2QyZDY1YTAtNzIzZi0xMWU3LThlYjYtY2YyMjhiZGY5OTRm\";\n}\nfunction messagePost(token,roomId,message,file) {\n  //----------------------------------------------------------------------------\n  // Author:      Rob Edwards (@clijockey/robedwa@cisco.com)\n  // Description: Post a message into a Spark Room\n  //----------------------------------------------------------------------------\n    this.destination = \"api.ciscospark.com\";\n    this.token = token;\n    this.roomId = roomId;\n    this.message = message;\n    this.file = file;\n\n    // Construct JSON:\n    var body = new HashMap();\n    body.put(\"roomId\", roomId);\n\n    // Check if this will be posting a message and/or file to the room\n    if (!message.equals(\"\")) {\n      body.put(\"text\", message);\n    }\n    if (!file.equals(\"\")) {\n      body.put(\"file\", file);\n    }\n    var jsonBody = JSON.javaToJsonString(body, body.getClass());\n    logger.addInfo(\"Sending JSON: \" + jsonBody);\n\n    // Make Rest call\n    var request = new httpRequest();\n    request.setup(this.destination,\"https\");\n    request.postRequest(\'/v1/messages\', jsonBody);\n    request.contentType(\"json\");\n    request.addHeader(\"Authorization\", \"Bearer \" + token);\n\n    var statusCode = request.execute();\n    statusCheck(statusCode);\n\n    this.value = request.getResponse(\"asString\");\n    logger.addInfo(\"Raw returned vaules: \"+this.value);\n\n    this.messageId = clean(value, \"id\");\n\n    request.disconnect();\n    return [messageId];\n}\n\nfunction registerUndoTask(token,messageId) {\n    // register undo task\n    var undoHandler = \"custom_Spark_messages_delete\";\n    var undoContext = ctxt.createInnerTaskContext(undoHandler);\n    var undoConfig = undoContext.getConfigObject();\n\n    // These are the variables that the rollback wf task gets called with.\n    undoConfig.token = token;\n    undoConfig.messageId = messageId;\n    undoConfig.proxyHost = proxyHost;\n    undoConfig.proxyPort = proxyPort;\n\n    ctxt.getChangeTracker().undoableResourceModified(\"Rollback post message\",\n                \"\",\"rollback \",\n                \"Rollback \"+messageId+\".\",undoHandler,undoConfig);\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////\n\n// main();\n\n// Workflow Inputs.\nvar token = input.token;\nvar message = input.message;\nvar file = input.file;\nvar roomId = input.roomId;\nvar proxyHost = input.proxyHost;\nvar proxyPort = input.proxyPort;\n\n\nvar sparkRoomId = getRoomIdFromName(token, roomId);\n\nif (sparkRoomId == \"none\") {\n    logger.addInfo(\"Room not found - room: \"+roomId+ \" was not found\");\n    // Set this task as failed.\n    ctxt.setFailed(\"Request failed.\");\n} else {\n\n    var result = messagePost(token,sparkRoomId,message,file);\n    logger.addInfo(\"Result: \"+result);\n\n    if (result)\n        logger.addInfo(\"Successfully posted message\");\n        output.messageId = result[0];\n}\n\n// Register rollback task, this is an optional setting.\nif (input.rollback == 1) {\n    registerUndoTask(token,result[0]);\n    logger.addInfo(\"The rollback option has been enabled, you will be able to rollback to poting of the message.\");\n} else {\n    logger.addInfo(\"You will not be able to rollback the post message task due to \'no rollback\' being selected.\");\n}\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>